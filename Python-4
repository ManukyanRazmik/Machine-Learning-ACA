1
##Can also be implemented wit RegExp

class Solution(object):
    def numUniqueEmails(self, emails):
        """
        :type emails: List[str]
        :rtype: int
        """
        email_set = set()
        for i in emails:
            em = list(i)
            for j in em:
                if j == '@' or j == '+':
                    break
                else:
                    if j == '.':
                        em.remove(j)

            if '+' in em:
                removed = 0
                for j in range(len(em)):
                    if em[j] == '+':
                        for k in range(j, len(em)):
                            if em[k - removed] == '@':
                                break
                            else:
                                em.pop(k - removed)
                                removed += 1
                        break


            email_set.add(''.join(em))
        return len(email_set)
        
        
************************************************************

2

def findAndReplacePattern(words, pattern):
    same_path = []
    for word in words:
        counter = {}
        for el in range(len(word)):
            if word[el] not in counter:
                counter[word[el]] = [pattern[el]]
            else:
                if pattern[el] not in counter[word[el]]:
                    counter[word[el]].append(pattern[el])
        flag = True
        for i in counter.values():
            if len(i) > 1:
                flag = False
        if flag:
            set1 = set()
            set2 = set()

            for key, val in counter.items():
                set1.add(key)
                set2.add(str((val)))

            if len(set1) != len(set2):
                flag = False
        if flag:
            same_path.append(word)

    return same_path
    
********************************************************
3


def findingUsersActiveMinutes(logs, k):
    answer = [0] * k
    actions = {}
    for id, time in logs:
        if id not in actions:
            actions[id] = [time]
        else:
            if time not in actions[id]:
                actions[id].append(time)
    times = {}
    for time in actions.values():
        if len(time) in times:
            times[len(time)] += 1
        else:
            times[len(time)] = 1
    for i in times.keys():
        answer[i - 1] = times[i]
    return(answer)

*******************************************************
4

def numJewelsInStones(jewels, stones):
    jes = 0
    for i in stones:
        if i in jewels:
            jes += 1
    return jes


def numJewelsInStones(jewels, stones):
    jewstones = {}
    for i in jewels:
        jewstones[i] = 0
    for j in stones:
        if j in jewstones:
            jewstones[i] += 1
    return(sum(jewstones.values()))
    
 #### Last one is slower
 
 
****************************************************
Beautiful binary string

#we solve it during the lesson

****************************************************

String power
 
def stringPower(string, k):
    if k == 0:
        return ''
    elif k > 0:
        return string * k
    else:
        k_p = -1 * k
        if len(string) % k_p == 0:
            ind = len(string) // k_p
            if string[:ind] * k_p == string:
                return string[:ind]
            else:
                return 'Undefined'
        else:
            return 'Undefined'
